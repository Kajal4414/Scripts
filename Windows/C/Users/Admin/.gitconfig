[user]
	# Information about the user
	name = Sakshi Aggarwal # User's name
	email = 81718060+sakshiagrwal@users.noreply.github.com # User's email address
	signingkey = 4AEE18F83AFDEB23 # User's GPG signing key
	username = sakshiagrwal # User's GitHub username

[gpg]
	# GnuPG Configuration
	program = C:/Program Files (x86)/GnuPG/bin/gpg.exe # Path to GnuPG program

[commit]
	# Commit Configuration
	gpgsign = true # Enable GPG signing for commits

[init]
	# Initial Configuration
	defaultBranch = main # Default branch name when initializing a new repository

[core]
	# Core Configuration
	autocrlf = false # End of lines conversion
	editor = 'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin # Default text editor to use
	autocrlf = false # Control end-of-line conversion
	untrackedCache = true # Speed up the status command
	whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol # Specify whitespace issues to be fixed during Git operations
	pager = delta # Use delta as the default pager program

[web]
	# Web Configuration
	browser = google-chrome # Default web browser to use

[instaweb]
	# Instaweb Configuration
	httpd = apache2 -f # Apache web server command line options for 'git instaweb'

[github]
	# GitHub Configuration
	user = sakshiagrwal # GitHub username
	token = token # GitHub API token for accessing the API

[alias]
	# Add Alias
	a = add --all # Shortcut to stage all changes
	ai = add -i # Shortcut to interactively stage changes

	# Apply Alias
	ap = apply # Shortcut to apply patches
	as = apply --stat # Shortcut to show a diffstat after applying patches
	ac = apply --check # Shortcut to check if patches apply cleanly

	# Abort Merge Alias
	ama = am --abort # Shortcut to abort the current merge
	amr = am --resolved # Shortcut to mark the current merge as resolved
	ams = am --skip # Shortcut to skip the current merge

	# Branch Alias
	b = branch # Shortcut to list branches
	ba = branch -a # Shortcut to list all branches, including remote ones
	bd = branch -d # Shortcut to delete a branch
	bdd = branch -D # Shortcut to force-delete a branch
	br = branch -r # Shortcut to list remote branches
	bc = rev-parse --abbrev-ref HEAD # Shortcut to get the current branch name
	bu = !git rev-parse --abbrev-ref --symbolic-full-name "@{u}" # Shortcut to get the name of the upstream branch
	bs = !git-branch-status # Shortcut to show the status of all branches

	# Commit Alias
	c = commit # Shortcut to create a new commit
	ca = commit -a # Shortcut to create a new commit, automatically staging changes
	cm = commit -m # Shortcut to create a new commit with a message
	cam = commit -am # Shortcut to create a new commit, automatically staging changes and with a message
	cem = commit --allow-empty -m # Shortcut to create a new, empty commit with a message
	cd = commit --amend # Shortcut to amend the latest commit
	cad = commit -a --amend # Shortcut to amend the latest commit, automatically staging changes
	ced = commit --allow-empty --amend # Shortcut to amend the latest, empty commit

	# Clone Alias
	cl = clone # Shortcut to clone a repository
	cld = clone --depth 1 # Shortcut to clone only the latest revision of a repository
	clg = !sh -c 'git clone git://github.com/$1 $(basename $1)' - # Shortcut to clone a repository from GitHub
	clgp = !sh -c 'git clone git@github.com:$1 $(basename $1)' - # Shortcut to clone a private repository from GitHub
	clgu = !sh -c 'git clone git@github.com:$(git config --get user.username)/$1 $1' - # Shortcut to clone your own repository from GitHub

	# Cherry-pick Alias
	cp = cherry-pick # Shortcut to apply a change from one branch to another
	cpa = cherry-pick --abort # Shortcut to abort the current cherry-pick operation
	cpc = cherry-pick --continue # Shortcut to continue the current cherry-pick operation

	# Diff Alias
	d = diff # Show differences between revisions
	dp = diff --patience # Show differences between revisions using the patience diff algorithm
	dc = diff --cached # Show differences between the index and a named commit
	dk = diff --check # Show differences between revisions and exit with non-zero status if there are differences
	dck = diff --cached --check # Show differences between the index and a named commit and exit with non-zero status if there are differences
	dt = difftool # Show differences using a specific diff tool
	dct = difftool --cached # Show differences between the index and a named commit using a specific diff tool

	# Fetch Alias
	f = fetch # Download objects and refs from another repository
	fo = fetch origin # Download objects and refs from the origin repository
	fu = fetch upstream # Download objects and refs from the upstream repository

	# Format Alias
	fp = format-patch # Format patches based on Git commits

	# Fsck Alias
	fk = fsck # Verify connectivity and validity of objects in the Git database

	# Grep Alias
	g = grep -p # Show the matching lines from files in the Git repository, using the -p option

	# Log Alias
	l = log --oneline # Show the commit logs in a one line format
	lg = log --oneline --graph --decorate # Show the commit logs in a one line format, with graph and decoration

	# LS-Files Alias
	ls = ls-files # Show information about files in the index and the working tree
	lsf = !git ls-files | grep -i # Show information about files in the index and the working tree and filter the results with grep -i

	# Merge Alias
	m = merge # Join two or more development histories (branches) together
	ma = merge --abort # Abort the current merge operation
	mc = merge --continue # Continue the merge operation after resolving conflicts
	ms = merge --skip # Skip the merge operation

	# Checkout Alias
	o = checkout # Switch to another branch or restore working tree files
	om = checkout master # Switch to the master branch
	ob = checkout -b # Create a new branch and switch to it
	opr = !sh -c 'git fo pull/$1/head:pr-$1 && git o pr-$1' # Fetch pull request and checkout the new branch

	# Prune Alias
	pr = prune -v # Prune all unreachable objects from the Git object database

	# Push Alias
	ps = push # Update remote refs along with associated objects
	psf = push -f # Force update remote refs along with associated objects
	psu = push -u # Set the upstream configuration for push and pull
	pst = push --tags # Push all tags to the remote repository

	# Push Alias
	pso = push origin # Push to the origin repository
	psao = push --all origin # Push all branches to the origin repository
	psfo = push -f origin # Force push to the origin repository
	psuo = push -u origin # Set the upstream configuration for push and pull for the origin repository

	# Push Alias for origin/master
	psom = push origin master # Push the master branch to the origin repository
	psaom = push --all origin master # Push all
	psfom = push -f origin master # Push force to origin master branch
	psuom = push -u origin master # Push with set upstream to origin master branch
	psoc = !git push origin $(git bc) # Push to origin current branch
	psaoc = !git push --all origin $(git bc) # Push all branches to origin
	psfoc = !git push -f origin $(git bc) # Push force to origin current branch
	psuoc = !git push -u origin $(git bc) # Push with set upstream to origin current branch
	psdc = !git push origin :$(git bc) # Push delete to origin current branch

	# Pull Alias
	pl = pull # Pull all branches
	pb = pull --rebase # Pull with rebase

	# Pull Alias for origin/master
	plo = pull origin # Pull from origin
	pbo = pull --rebase origin # Pull with rebase from origin
	plom = pull origin master # Pull from origin master branch
	ploc = !git pull origin $(git bc) # Pull from origin current branch
	pbom = pull --rebase origin master # Pull with rebase from origin master branch
	pboc = !git pull --rebase origin $(git bc) # Pull with rebase from origin current branch

	# Pull Alias
	plu = pull upstream # Pull from upstream
	plum = pull upstream master # Pull from upstream master branch
	pluc = !git pull upstream $(git bc) # Pull from upstream current branch
	pbum = pull --rebase upstream master # Pull with rebase from upstream master branch
	pbuc = !git pull --rebase upstream $(git bc) # Pull with rebase from upstream current branch

	# Rebase Alias
	rb = rebase # Rebase current branch
	rba = rebase --abort # Abort rebase
	rbc = rebase --continue # Continue rebase
	rbi = rebase --interactive # Interactive rebase
	rbs = rebase --skip # Skip rebase

	# Reset Alias
	re = reset # Reset current branch
	rh = reset HEAD # Reset the current branch's HEAD to its default state
	reh = reset --hard # Reset the current branch with the hard flag, discarding any uncommitted changes
	rem = reset --mixed # Reset the current branch with the mixed flag, preserving uncommitted changes as unstaged changes
	res = reset --soft # Reset the current branch with the soft flag, preserving uncommitted changes as staged changes
	rehh = reset --hard HEAD # Reset the HEAD of the current branch to its default state with the hard flag
	remh = reset --mixed HEAD # Reset the HEAD of the current branch to its default state with the mixed flag
	resh = reset --soft HEAD # Reset the HEAD of the current branch to its default state with the soft flag
	rehom = reset --hard origin/master # Reset the origin/master branch with the hard flag, discarding any uncommitted changes

	# Remote Alias
	r = remote # Manage remote repositories
	ra = remote add # Add a new remote repository
	rr = remote rm # Remove an existing remote repository
	rv = remote -v # Show remote repositories with verbose output
	rn = remote rename # Rename an existing remote repository
	rp = remote prune # Remove remote branches that are no longer in the remote repository
	rs = remote show # Show information about a remote repository
	rao = remote add origin # Add an origin remote repository
	rau = remote add upstream # Add an upstream remote repository
	rro = remote remove origin # Remove an origin remote repository
	rru = remote remove upstream # Remove an upstream remote repository
	rso = remote show origin # Show information about the origin remote repository
	rsu = remote show upstream # Show information about the upstream remote repository
	rpo = remote prune origin # Remove remote branches that are no longer in the origin remote repository
	rpu = remote prune upstream # Remove remote branches that are no longer in the upstream remote repository

	# Remove Alias
	rmf = rm -f # Removing a file in force mode
	rmrf = rm -r -f # Removing a directory and its contents in force mode

	# Status Alias
	s = status # Displaying the status of the git repository
	sb = status -s -b # Displaying a compact version of the repository's status, including branch information

	# Stash Alias
	sa = stash apply # Applying the latest stash on the current branch
	sc = stash clear # Clearing the stash
	sd = stash drop # Removing a stash
	sl = stash list # Listing all stashes
	sp = stash pop # Applying the latest stash and removing it from the stash list
	ss = stash save # Saving changes to a stash
	ssk = stash save -k # Saving changes to a stash, including the changes in the index
	sw = stash show # Displaying the changes of a stash
	st = !git stash list | wc -l 2>/dev/null | grep -oEi '[0-9][0-9]*' # Displaying the number of stashes in the stash list

	# Tag Alias
	t = tag # Create a new tag in the git repository
	td = tag -d # Deleting a tag in the git repository

	# Show Alias
	w = show # Displaying the details of the repository object (e.g. commit, file, etc.)
	wp = show -p # Displaying the patch (diff) representation of the repository object
	wr = show -p --no-color # Displaying the patch (diff) representation of the repository object without color codes

	# SVN Alias
	svnr = svn rebase # Rebasing changes from the svn repository
	svnd = svn dcommit # Committing changes to the svn repository
	svnl = svn log --oneline --show-commit # Displaying the svn log in a condensed one-line format

	# Submodule Alias
	subadd = !sh -c 'git submodule add git://github.com/$1 $2/$(basename $1)' - # Adding a new submodule to the git repository
	subrm = !sh -c 'git submodule deinit -f -- $1 && rm -rf .git/modules/$1 && git rm -f $1' - # Removing a submodule from the git repository
	subup = submodule update --init --recursive # Updating the submodules in the git repository
	subpull = !git submodule foreach git pull --tags -f origin master # Pulling the latest changes for all submodules from the remote repository

	# Update Index Alias
	assume = update-index --assume-unchanged # Set the specified files as unchanged in the index
	unassume = update-index --no-assume-unchanged # Revert the assumption of unchanged on the specified files in the index
	assumed = !git ls -v | grep ^h | cut -c 3- # Show all assumed unchanged files in the index
	unassumeall = !git assumed | xargs git unassume # Revert the assumption of unchanged on all files in the index
	assumeall = !git status -s | awk {'print $2'} | xargs git assume # Set all files in the index as assumed unchanged

	# Version Control Alias
	bump = !sh -c 'git commit -am \"Version bump v$1\" && git psuoc && git release $1' - # Commit current changes, create a tag for the new version, and push the changes to remote
	release = !sh -c 'git tag v$1 && git pst' - # Create a new tag for a specific version
	unrelease = !sh -c 'git tag -d v$1 && git pso :v$1' - # Delete a specific tag
	merged = !sh -c 'git o master && git plom && git bd $1 && git rpo' - # Get the merge history of a branch
	aliases = !git config -l | grep alias | cut -c 7- # Show all git aliases
	snap = !git stash save 'snapshot: $(date)' && git stash apply 'stash@{0}' # Stash changes without committing
	bare = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' - # Convert a repository to a bare repository
	whois = !sh -c 'git log -i -1 --author=\"$1\" --pretty=\"format:%an <%ae>\"' - # Show the author email of the last commit by a specific author
	serve = daemon --reuseaddr --verbose --base-path=. --export-all ./.git # Start a Git server for the current repository

	# Sync & Comparison Alias
	behind = !git rev-list --left-only --count $(git bu)...HEAD # Get the number of commits behind the upstream branch
	ahead = !git rev-list --right-only --count $(git bu)...HEAD # Get the number of commits ahead of the upstream branch
	ours = "!f() { git checkout --ours $@ && git add $@; }; f" # Use the version of a file from the current branch
	theirs = "!f() { git checkout --theirs $@ && git add $@; }; f" # Use the version of a file from the branch being merged
	subrepo = !sh -c 'git filter-branch --prune-empty --subdirectory-filter $1 master' - # Filter a branch to only contain the history of a subdirectory
	human = name-rev --name-only --refs=refs/heads/* # Show human-readable names for references

[filter "lfs"]
	# LFS Filter
	clean = git-lfs clean -- %f # Command to run during cleaning of the file
	smudge = git-lfs smudge -- %f # Command to run during smudging of the file
	process = git-lfs filter-process # Command to run to process the file through LFS filters
	required = true # Requirement for LFS processing to occur
